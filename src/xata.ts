// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";
import dotenv from "dotenv";
dotenv.config();

const tables = [
  {
    name: "blogs",
    columns: [
      { name: "description", type: "text" },
      { name: "content", type: "text" },
      { name: "title", type: "text" },
      { name: "slug", type: "string", unique: true },
    ],
  },
  {
    name: "projects",
    columns: [
      { name: "title", type: "string", unique: true },
      { name: "slug", type: "string", unique: true },
      { name: "description", type: "text" },
      { name: "content", type: "text" },
      { name: "tags", type: "multiple" },
      { name: "image", type: "file[]" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Blogs = InferredTypes["blogs"];
export type BlogsRecord = Blogs & XataRecord;

export type Projects = InferredTypes["projects"];
export type ProjectsRecord = Projects & XataRecord;

export type DatabaseSchema = {
  blogs: BlogsRecord;
  projects: ProjectsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: process.env.XATA_DATABASE_URL,
  apiKey: process.env.XATA_API_KEY,
  branch: process.env.XATA_BRANCH,
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient(defaultOptions);
  return instance;
};
